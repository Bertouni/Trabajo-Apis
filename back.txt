const express = require('express');
const cors = require('cors');
const mysql = require('mysql2');
const app = express();
const port = 3000;

app.use(cors());
app.use(express.json());

// Crear una conexión a la base de datos MySQL
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'TuContraseña',
  database: 'tutorlink'
});

connection.connect((err) => {
  if (err) {
    console.error('Error al conectar a la base de datos: ', err);
    return;
  }
  console.log('Conectado a la base de datos MySQL');

  // Crear tablas si no existen
  const createTables = `
    CREATE TABLE IF NOT EXISTS users (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(100) NOT NULL,
      email VARCHAR(100) UNIQUE NOT NULL,
      password VARCHAR(255) NOT NULL,
      role ENUM('student', 'teacher') NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS subjects (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(100) NOT NULL
    );

    CREATE TABLE IF NOT EXISTS teacher_profiles (
      id INT AUTO_INCREMENT PRIMARY KEY,
      user_id INT,
      bio TEXT,
      hourly_rate DECIMAL(10, 2),
      is_premium BOOLEAN DEFAULT FALSE,
      FOREIGN KEY (user_id) REFERENCES users(id)
    );

    CREATE TABLE IF NOT EXISTS teacher_subjects (
      id INT AUTO_INCREMENT PRIMARY KEY,
      teacher_id INT,
      subject_id INT,
      FOREIGN KEY (teacher_id) REFERENCES teacher_profiles(id),
      FOREIGN KEY (subject_id) REFERENCES subjects(id)
    );

    CREATE TABLE IF NOT EXISTS classes (
      id INT AUTO_INCREMENT PRIMARY KEY,
      student_id INT,
      teacher_id INT,
      subject_id INT,
      date DATETIME,
      duration INT,
      status ENUM('scheduled', 'completed', 'cancelled') DEFAULT 'scheduled',
      FOREIGN KEY (student_id) REFERENCES users(id),
      FOREIGN KEY (teacher_id) REFERENCES teacher_profiles(id),
      FOREIGN KEY (subject_id) REFERENCES subjects(id)
    );

    CREATE TABLE IF NOT EXISTS reviews (
      id INT AUTO_INCREMENT PRIMARY KEY,
      class_id INT,
      rating INT,
      comment TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (class_id) REFERENCES classes(id)
    );

    CREATE TABLE IF NOT EXISTS educational_materials (
      id INT AUTO_INCREMENT PRIMARY KEY,
      teacher_id INT,
      title VARCHAR(255) NOT NULL,
      description TEXT,
      price DECIMAL(10, 2),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (teacher_id) REFERENCES teacher_profiles(id)
    );
  `;

  connection.query(createTables, (err) => {
    if (err) {
      console.error('Error al crear las tablas: ', err);
    } else {
      console.log('Tablas creadas o ya existentes');
    }
  });
});

// Rutas de ejemplo

// Registrar un nuevo usuario
app.post('/users', (req, res) => {
  const { name, email, password, role } = req.body;
  const query = 'INSERT INTO users (name, email, password, role) VALUES (?, ?, ?, ?)';
  connection.query(query, [name, email, password, role], (err, result) => {
    if (err) {
      console.error('Error al registrar usuario: ', err);
      res.status(500).send('Error en el servidor');
      return;
    }
    res.status(201).json({ id: result.insertId, name, email, role });
  });
});

// Obtener perfil de profesor
app.get('/teachers/:id', (req, res) => {
  const teacherId = req.params.id;
  const query = `
    SELECT u.name, tp.bio, tp.hourly_rate, tp.is_premium, 
           GROUP_CONCAT(s.name) AS subjects
    FROM users u
    JOIN teacher_profiles tp ON u.id = tp.user_id
    LEFT JOIN teacher_subjects ts ON tp.id = ts.teacher_id
    LEFT JOIN subjects s ON ts.subject_id = s.id
    WHERE u.id = ?
    GROUP BY u.id
  `;
  connection.query(query, [teacherId], (err, results) => {
    if (err) {
      console.error('Error al obtener perfil de profesor: ', err);
      res.status(500).send('Error en el servidor');
      return;
    }
    if (results.length === 0) {
      res.status(404).send('Profesor no encontrado');
      return;
    }
    res.json(results[0]);
  });
});

// Programar una clase
app.post('/classes', (req, res) => {
  const { student_id, teacher_id, subject_id, date, duration } = req.body;
  const query = 'INSERT INTO classes (student_id, teacher_id, subject_id, date, duration) VALUES (?, ?, ?, ?, ?)';
  connection.query(query, [student_id, teacher_id, subject_id, date, duration], (err, result) => {
    if (err) {
      console.error('Error al programar clase: ', err);
      res.status(500).send('Error en el servidor');
      return;
    }
    res.status(201).json({ id: result.insertId, student_id, teacher_id, subject_id, date, duration });
  });
});

// Iniciar el servidor
app.listen(port, () => {
  console.log(Servidor ejecutándose en http://localhost:${port});
});